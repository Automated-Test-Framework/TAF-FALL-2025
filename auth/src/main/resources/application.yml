server:
  servlet:
    context-path:
  port: ${PORT_AUTH:8085}

spring:
  application:
    name: auth
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 17634257131-187iegl711i90p3q38smbldrdr7ao8pm.apps.googleusercontent.com
            client-secret: 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
            scope: [ openid, profile, email ]
            redirect-uri: "http://localhost:8080/auth/login/oauth2/code/{registrationId}"
        provider:
          google:
            issuer-uri: https://accounts.google.com
  cloud:
    compatibility-verifier:
      enabled: false

  data:
    mongodb:
      uri: ${DB_URI}
      authentication-database: ${DB_AUTH}
      database: ${DB_NAME}
      auto-index-creation: true

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

feign:
  okhttp:
    enabled: true

taf:
  app:
    jwtSecret: ${API_TEST_TOKEN}
    jwtExpirationMs: ${API_TEST_EXP_TIME}

eureka:
  instance:
    instance-id: ${spring.application.name}:${random.value}
  #  prefer-ip-address: true

  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${EUREKA_USERNAME}:${EUREKA_PASSWORD}@${EUREKA_HOST}:${EUREKA_PORT}/eureka

springdoc:
  api-docs:
    path: /api-docs

  swagger-ui:
    path:  /swagger-ui.html

logging:
  level:
    root: DEBUG #${LOG_ROOT}
    org.springframework.web: DEBUG #${LOG_WEB}
    org.hibernate: DEBUG #${LOG_HIBERNATE}
    org.springframework: DEBUG #${LOG_FRAMEWORK}

#endpoints:
#  cors:
#    allowed-origins: "*"
#    allowed-methods: "*"
#    allowed-headers: "*"
#    allow-credentials: true