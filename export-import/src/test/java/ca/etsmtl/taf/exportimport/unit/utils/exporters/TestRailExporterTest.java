package ca.etsmtl.taf.exportimport.unit.utils.exporters;

import ca.etsmtl.taf.exportimport.config.TestRailConfig;
import ca.etsmtl.taf.exportimport.dtos.testrail.*;
import ca.etsmtl.taf.exportimport.models.*;
import ca.etsmtl.taf.exportimport.repositories.TestRailMappingRepository;
import ca.etsmtl.taf.exportimport.services.EntityLookupService;
import ca.etsmtl.taf.exportimport.utils.exporters.TestRailExporter;
import com.gurock.testrail.APIClient;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.io.IOException;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TestRailExporterTest {

    /*
    * Tests generated by AI assistant and modified manually
     */

    @Mock
    private TestRailMappingRepository mappingRepo;

    @Mock
    private EntityLookupService lookupService;

    @Mock
    private TestRailConfig config;

    @Mock
    private APIClient apiClient;

    @InjectMocks
    private TestRailExporter exporter;

    @Captor
    private ArgumentCaptor<Map<String, Object>> mapCaptor;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(config.createClient()).thenReturn(apiClient);
        exporter = new TestRailExporter(config, mappingRepo, lookupService);
    }

    @Test
    void testExportProjects_createsNewProjectWhenNotMapped() throws Exception {
        Project project = Project.builder()._id("p1").name("Proj").description("Desc").build();
        Map<EntityType, List<Entity>> entities = Map.of(EntityType.PROJECT, List.of(project));

        when(mappingRepo.get(TestRailMappingRepository.PROJECT_KEY_SUFFIX + "p1")).thenReturn(null);

        JSONObject response = new JSONObject();
        response.put("id", 123);
        when(apiClient.sendPost(eq("add_project"), anyMap())).thenReturn(response);

        exporter.exportTo(new HashMap<>(entities));

        verify(mappingRepo).put(TestRailMappingRepository.PROJECT_KEY_SUFFIX + "p1", 123);
    }

    @Test
    void testExportProjects_logsWarningAndThrowsOnError() throws Exception {
        Project project = Project.builder()._id("p1").name("Proj").description("Desc").build();
        Map<EntityType, List<Entity>> entities = Map.of(EntityType.PROJECT, List.of(project));

        when(mappingRepo.get(anyString())).thenReturn(null);
        when(apiClient.sendPost(anyString(), anyMap())).thenThrow(new IOException("API error"));

        assertThrows(IOException.class, () -> exporter.exportTo(new HashMap<>(entities)));
    }

    @Test
    void testExportSuites_createsSuiteAndSection() throws Exception {
        Project project = Project.builder()._id("p1").name("Proj").description("Desc").build();
        TestSuite suite = TestSuite.builder()._id("s1").projectId("p1").name("Suite").description("desc").build();

        Map<EntityType, List<Entity>> entities = new HashMap<>();
        entities.put(EntityType.PROJECT, List.of(project));
        entities.put(EntityType.TEST_SUITE, List.of(suite));

        when(mappingRepo.get(TestRailMappingRepository.PROJECT_KEY_SUFFIX + "p1")).thenReturn(11);
        when(mappingRepo.get(TestRailMappingRepository.TEST_SUITE_KEY_SUFFIX + "s1")).thenReturn(null);
        when(mappingRepo.get(TestRailMappingRepository.SECTION_KEY_SUFFIX + "s1")).thenReturn(null);

        JSONObject suiteResp = new JSONObject();
        suiteResp.put("id", 22);
        when(apiClient.sendPost(eq("add_suite/11"), anyMap())).thenReturn(suiteResp);

        JSONObject sectionResp = new JSONObject();
        sectionResp.put("id", 33);
        when(apiClient.sendPost(eq("add_section/11"), anyMap())).thenReturn(sectionResp);

        exporter.exportTo(entities);

        verify(mappingRepo).put(TestRailMappingRepository.TEST_SUITE_KEY_SUFFIX + "s1", 22);
        verify(mappingRepo).put(TestRailMappingRepository.SECTION_KEY_SUFFIX + "s1", 33);
    }

    @Test
    void testExportCases_createsCaseWhenNotMapped() throws Exception {
        TestCase testCase = TestCase.builder()._id("c1").testSuiteId("s1").name("Case1").build();
        Map<EntityType, List<Entity>> entities = new HashMap<>();
        entities.put(EntityType.TEST_CASE, List.of(testCase));

        when(mappingRepo.get(TestRailMappingRepository.TEST_CASE_KEY_SUFFIX + "c1")).thenReturn(null);
        when(mappingRepo.get(TestRailMappingRepository.SECTION_KEY_SUFFIX + "s1")).thenReturn(99);

        JSONObject caseResp = new JSONObject();
        caseResp.put("id", 88);
        when(apiClient.sendPost(eq("add_case/99"), anyMap())).thenReturn(caseResp);

        exporter.exportTo(entities);

        verify(mappingRepo).put(TestRailMappingRepository.TEST_CASE_KEY_SUFFIX + "c1", 88);
    }

    @Test
    void testExportRuns_createsRunWhenNotMapped() throws Exception {
        TestRun run = TestRun.builder()
                ._id("r1")
                .testSuiteId("s1")
                .name("Run1")
                .testCaseIds(List.of("c1"))
                .build();

        TestSuite suite = TestSuite.builder()._id("s1").projectId("p1").name("S").description("D").build();

        Map<EntityType, List<Entity>> entities = new HashMap<>();
        entities.put(EntityType.TEST_RUN, List.of(run));

        when(mappingRepo.get(TestRailMappingRepository.TEST_RUN_KEY_SUFFIX + "r1")).thenReturn(null);
        when(mappingRepo.get(TestRailMappingRepository.TEST_SUITE_KEY_SUFFIX + "s1")).thenReturn(77);
        when(mappingRepo.get(TestRailMappingRepository.TEST_CASE_KEY_SUFFIX + "c1")).thenReturn(88);
        when(mappingRepo.get(TestRailMappingRepository.PROJECT_KEY_SUFFIX + "p1")).thenReturn(99);
        when(lookupService.findTestSuiteById("s1")).thenReturn(suite);

        JSONObject runResp = new JSONObject();
        runResp.put("id", 66);
        when(apiClient.sendPost(eq("add_run/99"), anyMap())).thenReturn(runResp);

        exporter.exportTo(entities);

        verify(mappingRepo).put(TestRailMappingRepository.TEST_RUN_KEY_SUFFIX + "r1", 66);
    }

    @Test
    void testExportResults_addsResultsToTestRail() throws Exception {
        TestResult result = TestResult.builder()
                ._id("res1")
                .testRunId("run1")
                .testCaseId("case1")
                .status(TestRunStatus.PASSED)
                .build();

        Map<EntityType, List<Entity>> entities = new HashMap<>();
        entities.put(EntityType.TEST_RESULT, List.of(result));

        when(mappingRepo.get(TestRailMappingRepository.TEST_RUN_KEY_SUFFIX + "run1")).thenReturn(10);
        when(mappingRepo.get(TestRailMappingRepository.TEST_RESULT_KEY_SUFFIX + "res1")).thenReturn(null);
        when(mappingRepo.get(TestRailMappingRepository.TEST_CASE_KEY_SUFFIX + "case1")).thenReturn(20);

        JSONArray respArray = new JSONArray();
        JSONObject created = new JSONObject();
        created.put("id", 100);
        created.put("comment", "res1");
        respArray.add(created);
        when(apiClient.sendPost(eq("add_results_for_cases/10"), anyMap())).thenReturn(respArray);

        exporter.exportTo(entities);

        verify(mappingRepo).put(TestRailMappingRepository.TEST_RESULT_KEY_SUFFIX + "res1", 100);
    }

    @Test
    void testExportResults_logsWarningOnEmptyResults() throws Exception {
        Map<EntityType, List<Entity>> entities = new HashMap<>();
        entities.put(EntityType.TEST_RESULT, List.of());

        exporter.exportTo(entities);
        verifyNoInteractions(apiClient);
    }
}
