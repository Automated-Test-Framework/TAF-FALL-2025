package ca.etsmtl.taf.exportimport.unit.services;

import ca.etsmtl.taf.exportimport.models.Entity;
import ca.etsmtl.taf.exportimport.models.EntityType;
import ca.etsmtl.taf.exportimport.services.EntityLookupService;
import ca.etsmtl.taf.exportimport.services.ExportDependencyResolver;
import ca.etsmtl.taf.exportimport.services.ExportService;
import ca.etsmtl.taf.exportimport.utils.exporters.Exporter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ExportServiceTest {

    /*
     * Tests generated by AI assistant and modified manually
     */

    @Mock
    private EntityLookupService entityLookupService;

    @Mock
    private ExportDependencyResolver exportDependencyResolver;

    @Mock
    private Exporter exporterMock;

    @InjectMocks
    private ExportService exportService;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        Map<String, Exporter> exporters = new HashMap<>();
        exporters.put("testrail", exporterMock);
        exportService = new ExportService(entityLookupService, exporters, exportDependencyResolver);
    }

    @Test
    void testExportTo_successfulExport() throws Exception {
        String type = "testrail";
        Entity project = mock(Entity.class);
        Entity suite = mock(Entity.class);

        Map<EntityType, List<String>> ids = new HashMap<>();
        ids.put(EntityType.PROJECT, List.of("p1"));
        ids.put(EntityType.TEST_SUITE, List.of("s1"));

        when(exportDependencyResolver.resolveDependencies(ids)).thenReturn(ids);
        when(entityLookupService.findById("p1", EntityType.PROJECT)).thenReturn(project);
        when(entityLookupService.findById("s1", EntityType.TEST_SUITE)).thenReturn(suite);

        String result = exportService.exportTo(type, ids);

        verify(exporterMock).exportTo(anyMap());
        assertTrue(result.contains("Successfully exported"));
        assertTrue(result.contains("project"));
        assertTrue(result.contains("suite"));
    }

    @Test
    void testExportTo_unsupportedType_throwsException() {
        String invalidType = "invalid";
        Map<EntityType, List<String>> ids = Map.of();

        Exception exception = assertThrows(Exception.class, () ->
                exportService.exportTo(invalidType, ids));

        assertEquals("Unsupported exporter type: invalid", exception.getMessage());
        verifyNoInteractions(exportDependencyResolver, entityLookupService);
    }

    @Test
    void testExportTo_exporterThrowsException() throws Exception {
        String type = "testrail";
        Map<EntityType, List<String>> ids = Map.of(EntityType.PROJECT, List.of("p1"));
        Entity project = mock(Entity.class);

        when(exportDependencyResolver.resolveDependencies(ids)).thenReturn(ids);
        when(entityLookupService.findById("p1", EntityType.PROJECT)).thenReturn(project);
        doThrow(new RuntimeException("boom")).when(exporterMock).exportTo(anyMap());

        Exception exception = assertThrows(Exception.class, () ->
                exportService.exportTo(type, ids));

        assertTrue(exception.getMessage().contains("An error occured during the exportation"));
    }

    @Test
    void testGetExportConfirmationMessage_variousCounts() throws Exception {
        Map<EntityType, List<String>> ids = new HashMap<>();
        ids.put(EntityType.PROJECT, List.of("p1"));
        ids.put(EntityType.TEST_CASE, List.of("c1", "c2"));
        ids.put(EntityType.TEST_RUN, List.of("r1"));
        ids.put(EntityType.TEST_RESULT, List.of("res1", "res2", "res3"));

        Map<EntityType, List<Entity>> entities = new LinkedHashMap<>();
        ids.forEach((k, v) -> entities.put(k, v.stream().map(id -> mock(Entity.class)).toList()));

        when(exportDependencyResolver.resolveDependencies(any())).thenReturn(ids);
        when(entityLookupService.findById(anyString(), any())).thenReturn(mock(Entity.class));

        String result = exportService.exportTo("testrail", ids);

        assertTrue(result.contains("project"));
        assertTrue(result.contains("case"));
        assertTrue(result.contains("run"));
        assertTrue(result.contains("result"));
    }

    @Test
    void testGetExportConfirmationMessage_nothingExported() throws Exception {
        Map<EntityType, List<String>> ids = Map.of();
        when(exportDependencyResolver.resolveDependencies(ids)).thenReturn(ids);

        String result = exportService.exportTo("testrail", ids);

        assertEquals("Nothing was exported", result);
        verify(exporterMock).exportTo(anyMap());
    }
}
